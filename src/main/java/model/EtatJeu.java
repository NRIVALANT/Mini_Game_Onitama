package model;

/**
 * √ânum√©ration repr√©sentant les diff√©rents √©tats possibles du jeu.
 *
 * CONCEPT POO : √âNUM√âRATION
 * Une Enum est une classe sp√©ciale qui d√©finit un ensemble fixe de constantes.
 * Elle est type-safe (pas d'erreur de frappe possible) et peut avoir des m√©thodes.
 */
public enum EtatJeu {
    /**
     * Le jeu est en cours
     */
    EN_COURS("Le jeu continue..."),

    /**
     * Un joueur a gagn√© la partie
     */
    VICTOIRE("Partie termin√©e - Victoire!"),

    /**
     * Match nul (plateau plein sans gagnant)
     */
    MATCH_NUL("Partie termin√©e - Match nul!"),

    /**
     * Le jeu n'a pas encore commenc√©
     */
    NON_DEMARRE("En attente de d√©marrage");

    // ENCAPSULATION : attribut priv√© avec getter public
    private final String description;

    /**
     * Constructeur priv√© (les Enums ont toujours des constructeurs priv√©s)
     * @param description Description textuelle de l'√©tat
     */
    EtatJeu(String description) {
        this.description = description;
    }

    /**
     * Getter pour obtenir la description de l'√©tat
     * @return la description de l'√©tat
     */
    public String getDescription() {
        return description;
    }

    /**
     * POLYMORPHISME : M√©thode qui retourne un comportement diff√©rent selon l'√©tat
     * @return true si le jeu est termin√© (victoire ou match nul)
     */
    public boolean estTermine() {
        return this == VICTOIRE || this == MATCH_NUL;
    }

    /**
     * M√âTHODE UTILITAIRE : Affiche un message format√© selon l'√©tat
     * @return le message format√©
     */
    public String getMessage() {
        switch (this) {
            case VICTOIRE:
                return "üéâ " + description + " üéâ";
            case MATCH_NUL:
                return "ü§ù " + description + " ü§ù";
            case EN_COURS:
                return "‚ñ∂Ô∏è  " + description;
            case NON_DEMARRE:
                return "‚è∏Ô∏è  " + description;
            default:
                return description;
        }
    }
}
