package model;

/**
 * √ânum√©ration repr√©sentant les types de pions dans Onitama.
 *
 * PRINCIPE POO : Type-Safe Enum Pattern
 * - Chaque joueur a 1 Ma√Ætre et 4 √âl√®ves
 * - Le Ma√Ætre est crucial pour la victoire
 */
public enum TypePion {
    MAITRE("Ma√Ætre", "üëë", 'M'),
    ELEVE("√âl√®ve", "‚öîÔ∏è", 'E');

    // ENCAPSULATION : Attributs priv√©s
    private final String nom;
    private final String emoji;
    private final char symbole;

    /**
     * Constructeur priv√© de l'enum.
     *
     * @param nom nom du type de pion
     * @param emoji emoji pour affichage visuel
     * @param symbole caract√®re pour affichage simplifi√©
     */
    TypePion(String nom, String emoji, char symbole) {
        this.nom = nom;
        this.emoji = emoji;
        this.symbole = symbole;
    }

    /**
     * V√©rifie si ce type de pion peut gagner en atteignant le temple adverse.
     * Seul le Ma√Ætre peut gagner de cette fa√ßon.
     *
     * @return true si c'est un Ma√Ætre
     */
    public boolean peutGagnerParTemple() {
        return this == MAITRE;
    }

    /**
     * V√©rifie si la capture de ce pion entra√Æne la victoire.
     * Capturer le Ma√Ætre adverse = victoire imm√©diate
     *
     * @return true si c'est un Ma√Ætre
     */
    public boolean captureEntraineVictoire() {
        return this == MAITRE;
    }

    // ENCAPSULATION : Getters
    public String getNom() {
        return nom;
    }

    public String getEmoji() {
        return emoji;
    }

    public char getSymbole() {
        return symbole;
    }

    @Override
    public String toString() {
        return nom;
    }

    /**
     * Cr√©e un TypePion depuis un symbole.
     * PRINCIPE : Factory method pattern
     *
     * @param symbole le symbole ('M' ou 'E')
     * @return le type correspondant ou null si invalide
     */
    public static TypePion depuisSymbole(char symbole) {
        for (TypePion type : values()) {
            if (type.symbole == symbole) {
                return type;
            }
        }
        return null;
    }
}
